{"version":3,"sources":["components/AddCategory.js","hooks/useFetch.js","components/GifGridItem.js","components/GifGrid.js","GifExportApp.js","index.js","helpers/getgif.js"],"names":["AddCategory","setCategories","useState","textValue","setTextValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","require","useEffect","getGifs","useFetch","category","data","loading","state","setState","then","GifGridItem","id","title","image","className","src","alt","GifGrid","images","map","GifExpertApp","categories","cate","ReactDOM","render","document","getElementById","a","url","encodeURI","fetch","resp","json","gifs","img","downsized_medium"],"mappings":"4LAoCeA,EAjCK,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAElB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAcA,OAAO,sBACHC,SAbkB,SAACC,GACnBA,EAAEC,iBAEGJ,EAAUK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OAEvCN,EAAa,MAKd,SAGH,uBACIO,KAAM,OACNC,YAAY,0BAEZC,MAAOV,EAEPW,SAAU,SAACR,GACPF,EAAaE,EAAES,OAAOF,a,QC7BtC,G,KAAgCG,EAAQ,IAAhCd,EAAR,EAAQA,SAAUe,EAAlB,EAAkBA,UACVC,EAAYF,EAAQ,GAApBE,QAsBOC,EAhBE,SAACC,GAEd,MAA0BlB,EAAS,CAACmB,KAAK,GAAIC,SAAQ,IAArD,mBAAOC,EAAP,KAAcC,EAAd,KASA,OANAP,GACI,WACIC,EAAQE,GAAUK,MAAK,SAACJ,GAAD,OAAQG,EAAS,CAACH,OAAMC,SAAQ,SACxD,CAACF,IAGDG,GCLIG,EAVK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,MAE9B,OACA,sBAAKC,UAAU,8CAAf,UACI,qBAAKC,IAAKF,EAAOG,IAAMJ,IACvB,4BAAIA,QCuBGK,EAzBC,SAAC,GAAe,IAAdb,EAAa,EAAbA,SAEd,EAA+BD,EAASC,GAA5Bc,EAAZ,EAAOb,KAAaC,EAApB,EAAoBA,QAEpB,OAAO,gCAEH,6BAAKF,IAEJE,GAAW,8CAEZ,qBAAKQ,UAAU,iBAAf,SAEQI,EAAOC,KAAK,SAAAN,GACR,OAAO,cAAC,EAAD,eAECA,GADCA,EAAMF,aCapBS,EA1BM,WAEjB,MAAsClC,mBAAS,CAAC,cAAhD,mBAAQmC,EAAR,KAAoBpC,EAApB,KAEA,OAAO,qCACH,gDAEA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAGQoC,EAAWF,KAAI,SAACG,GAAD,OACX,cAAC,EAAD,CAEIlB,SAAUkB,GADLA,Y,MCjB7BC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U,yGCJbxB,EAAO,uCAAG,WAAOE,GAAP,uBAAAuB,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUzB,GAFtF,sBAIA0B,MAAMF,GAJN,cAIbG,EAJa,gBAMEA,EAAKC,OANP,uBAMZ3B,EANY,EAMZA,KAED4B,EAAO5B,EAAKc,KAAK,SAAAe,GAEnB,MAAO,CACHvB,GAAKuB,EAAIvB,GACTC,MAAQsB,EAAItB,MACZC,MAAQqB,EAAIhB,OAAOiB,iBAAiBP,QAbzB,kBAmBZK,GAnBY,4CAAH,wD","file":"static/js/main.77050670.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst AddCategory = ({setCategories})=>{\r\n\r\n    const [textValue, setTextValue] = useState(\"\");\r\n\r\n    const handledSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if ( textValue.trim().length > 2){\r\n\r\n            setCategories( cats => [ textValue, ...cats])\r\n\r\n            setTextValue(\"\")\r\n        }\r\n\r\n    }\r\n\r\n    return <form\r\n        onSubmit={handledSubmit}\r\n    >\r\n        <input \r\n            type={\"text\"}\r\n            placeholder=\"esciba cualquier mierda\"\r\n\r\n            value={textValue}\r\n\r\n            onChange={(e)=>{\r\n                setTextValue(e.target.value)\r\n            }}\r\n        />    \r\n    </form>\r\n\r\n}\r\n\r\nexport default AddCategory\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","const { useState, useEffect } = require(\"react\");\r\nconst { getGifs } = require(\"../helpers/getgif\");\r\n\r\n\r\n\r\n\r\n\r\nconst useFetch = (category)=>{\r\n\r\n    const [state, setState] = useState({data:[], loading:true});\r\n\r\n\r\n    useEffect(\r\n        ()=>{\r\n            getGifs(category).then((data)=>setState({data, loading:false}));\r\n        }, [category]\r\n    )\r\n\r\n    return state\r\n\r\n\r\n}\r\n\r\nexport default useFetch","import React from \"react\";\r\n\r\n\r\nconst GifGridItem = ({ id, title, image })=>{\r\n\r\n    return (\r\n    <div className=\"card-item animate__animated animate__fadeIn\">\r\n        <img src={image} alt= {title}></img>\r\n        <p>{title}</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getgif\";\r\nimport useFetch from \"../hooks/useFetch\";\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\n\r\nconst GifGrid = ({category}) =>{\r\n\r\n    const {data:images, loading} = useFetch(category);\r\n\r\n    return <div>\r\n\r\n        <h3>{category}</h3>\r\n\r\n        {loading && <h2>Loading.....</h2>}\r\n\r\n        <div className=\"card-container\">\r\n            {\r\n                images.map( image =>{\r\n                    return <GifGridItem \r\n                        key={image.id}\r\n                        {...image}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default GifGrid\r\n\r\n\r\n","import { useState } from \"react\"\r\n\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\n\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    const [ categories, setCategories ] = useState([\"One Punch\"]);\r\n\r\n    return <>\r\n        <h2>Gif Expert App</h2>\r\n\r\n        <AddCategory setCategories = {setCategories} />\r\n        <hr/>\r\n\r\n        <ol>\r\n\r\n            {\r\n                categories.map((cate)=>\r\n                    <GifGrid\r\n                        key={cate} \r\n                        category={cate}/>\r\n                )\r\n            }\r\n\r\n\r\n        </ol>\r\n    </>\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExportApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n","\r\n\r\n\r\nexport const getGifs = async( category )=>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=FCt25aB9hNfDM5T1Z6gNWTz6OgRKpr2T&q=${encodeURI(category)}&limit=10`\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n\r\n        return {\r\n            id : img.id,\r\n            title : img.title,\r\n            image : img.images.downsized_medium.url,\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return gifs;\r\n    \r\n\r\n}"],"sourceRoot":""}